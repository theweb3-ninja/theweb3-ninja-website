# .windsurfrules - Eveo Italian Event Platform

This file has been superseded by CLAUDE.md

## Project Overview

Eveo is an Italian B2B2C marketplace connecting event organizers with verified service providers. The platform facilitates event planning through smart matching, quote management, and streamlined booking processes.

## ðŸš¨ IMPORTANT NOTICE - DOCUMENTATION CONSOLIDATED

All content from this file has been consolidated into `/Users/democle/Documents/Eveo/eveo-marketplace-app/CLAUDE.md` which now serves as the single source of truth for:

- Project overview and architecture
- Development commands and workflows
- Feature implementation roadmap (Phases 1-3)
- Database schemas and API specifications
- Testing strategies and deployment procedures
- Long-term planning and business logic

This file is retained for historical reference and to maintain any external links that may reference it.

---

## Historical Project Status (Consolidated into CLAUDE.md)

The project is already initialized with a modern React Router v7 + Cloudflare Workers setup including SSR, i18n, and a complete UI component system. All architectural details and implementation guidance have been moved to CLAUDE.md.

## Historical Content Reference

The following sections have been moved to CLAUDE.md:

- Tech Stack (Aligned with Current Implementation)
- Cloudflare Infrastructure (To Be Added)
- Language File Migration Approaches
- Extending Current Architecture
- Directory Structure
- Database Schema (D1 Integration)
- Vendor Categories Configuration
- Feature Implementation Priorities (Phases 1-3)
- Internationalization Extensions
- API Layer Integration
- Form Validation (Zod Schemas)
- Security Implementation
- Email Integration
- Development Commands
- Testing Strategy
- Performance Optimizations
- Deployment Strategy
- Business Logic Rules
- Key Integration Points
- Notes for AI Assistant

For current and accurate information on any of these topics, please consult CLAUDE.md.

---

## Legacy Content (Superseded by CLAUDE.md)

_The remaining content in this file represents the historical state and has been superseded by the comprehensive CLAUDE.md documentation._

### Core Framework (Already Configured)

- **Framework**: React 19 with React Router v7 (SSR enabled)
- **Build Tool**: Vite
- **Runtime**: Cloudflare Workers/Pages
- **Styling**: Tailwind CSS v4 with custom UI component library
- **Type Safety**: TypeScript
- **Testing**: Vitest with React Testing Library
- **Internationalization**: i18next with 10 language support

### Cloudflare Infrastructure (To Be Added)

- **Database**: Cloudflare D1 (SQLite at edge)
- **Key-Value Store**: Cloudflare KV (sessions, config, cache)
- **File Storage**: Cloudflare R2 (documents, media, proposals)
- **Real-time**: Durable Objects (chat, live quotes, availability)
- **Auth**: JWT tokens with KV storage

### Additional Dependencies to Install

```bash
bun install zod @hookform/resolvers react-hook-form
bun install @radix-ui/react-icons @radix-ui/react-dialog @radix-ui/react-dropdown-menu
bun install @radix-ui/react-select @radix-ui/react-tabs
bun install bcryptjs jsonwebtoken @types/bcryptjs @types/jsonwebtoken
```

## Language File Migration Approaches

### Approach 1: TypeScript to JSON Conversion (Implemented)

We successfully converted all language files from TypeScript (.ts) to JSON (.json) format:

1. **Conversion Method**: Used Node.js script with regex extraction and eval to parse TypeScript objects
2. **Files Converted**: All 10 language files (de, en, es, fr, it, nl, pl, pt, ro, sv)
3. **Updates Made**:
   - Converted `.ts` files to `.json` in the same directory (`app/i18n/`)
   - Updated `languageService.ts` to import JSON files directly
   - Modified `index.ts` to export JSON data
   - Added `resolveJsonModule: true` to `tsconfig.app.json`
   - Removed old TypeScript language files

**Benefits**:

- Cleaner separation of data from code
- Standard JSON format for translations
- Easier for non-developers to edit
- Better tooling support for translation management

### Alternative Approaches Considered

1. **Separate translations directory**: Initially considered creating `app/i18n/translations/` subdirectory, but opted to keep JSON files in the existing `app/i18n/` directory for simpler migration

2. **Dynamic imports**: Could use dynamic imports with async loading, but static imports are simpler and work well with the current SSR setup

3. **i18next backend loader**: Could configure i18next to load JSON files dynamically, but direct imports are more efficient for the current use case

## Extending Current Architecture

### Directory Structure (Building on Existing)

```plain
app/
â”œâ”€â”€ components/           # (Existing) Reusable React components
â”‚   â”œâ”€â”€ ui/              # (Existing) Base UI components
â”‚   â”œâ”€â”€ sections/        # (Existing) Landing page sections
â”‚   â”œâ”€â”€ forms/           # NEW: Form components for marketplace
â”‚   â”œâ”€â”€ vendor/          # NEW: Vendor-specific components
â”‚   â”œâ”€â”€ events/          # NEW: Event management components
â”‚   â””â”€â”€ auth/            # NEW: Authentication components
â”œâ”€â”€ config/              # (Existing) Configuration modules
â”‚   â”œâ”€â”€ languages.ts     # (Existing) Language configurations
â”‚   â”œâ”€â”€ links.ts         # (Existing) Link configurations
â”‚   â”œâ”€â”€ seo-metadata.ts  # (Existing) SEO metadata
â”‚   â””â”€â”€ categories.ts    # NEW: Vendor categories config
â”œâ”€â”€ i18n/                # (Existing) Internationalization
â”‚   â””â”€â”€ translations/    # (Existing) JSON files per language
â”œâ”€â”€ routes/              # (Existing) Page components
â”‚   â”œâ”€â”€ _index.tsx       # (Existing) Homepage
â”‚   â”œâ”€â”€ auth/            # NEW: Authentication routes
â”‚   â”œâ”€â”€ vendors/         # NEW: Vendor management routes
â”‚   â”œâ”€â”€ events/          # NEW: Event creation routes
â”‚   â””â”€â”€ dashboard/       # NEW: User dashboard routes
â”œâ”€â”€ services/            # (Existing) Business logic
â”‚   â”œâ”€â”€ api/             # NEW: API service layer
â”‚   â”œâ”€â”€ auth.ts          # NEW: Authentication services
â”‚   â””â”€â”€ email.ts         # NEW: Email notification services
â”œâ”€â”€ lib/                 # NEW: Utility libraries
â”‚   â”œâ”€â”€ db.ts            # NEW: D1 database utilities
â”‚   â”œâ”€â”€ storage.ts       # NEW: R2 storage utilities
â”‚   â””â”€â”€ validation.ts    # NEW: Zod schemas
â””â”€â”€ types/               # (Existing) TypeScript definitions
    â”œâ”€â”€ auth.ts          # NEW: Authentication types
    â”œâ”€â”€ vendor.ts        # NEW: Vendor types
    â””â”€â”€ event.ts         # NEW: Event types
```

## Database Schema (D1 Integration)

### Database Setup Commands

```bash
# Create D1 database
npx wrangler d1 create eveo-production
npx wrangler d1 create eveo-preview

# Apply migrations
npx wrangler d1 migrations apply eveo-production
npx wrangler d1 migrations apply eveo-preview --local
```

### Core Tables

```sql
-- Users table
CREATE TABLE users (
  id TEXT PRIMARY KEY,
  email TEXT UNIQUE NOT NULL,
  password_hash TEXT NOT NULL,
  user_type TEXT CHECK(user_type IN ('client', 'vendor')) NOT NULL,
  name TEXT NOT NULL,
  phone TEXT,
  language TEXT DEFAULT 'it',
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Vendors table
CREATE TABLE vendors (
  id TEXT PRIMARY KEY,
  user_id TEXT REFERENCES users(id),
  company_name TEXT NOT NULL,
  category TEXT NOT NULL,
  description TEXT,
  address TEXT,
  city TEXT NOT NULL,
  region TEXT NOT NULL,
  coverage_area TEXT NOT NULL,
  website TEXT,
  subscription_type TEXT CHECK(subscription_type IN ('monthly', 'annual')),
  subscription_status TEXT CHECK(subscription_status IN ('active', 'trial', 'expired')),
  trial_end_date DATETIME,
  verified BOOLEAN DEFAULT FALSE,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Events table
CREATE TABLE events (
  id TEXT PRIMARY KEY,
  client_id TEXT REFERENCES users(id),
  title TEXT NOT NULL,
  description TEXT,
  event_date DATE NOT NULL,
  location TEXT NOT NULL,
  guest_count INTEGER,
  budget_total DECIMAL,
  status TEXT DEFAULT 'draft',
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Quote requests table
CREATE TABLE quote_requests (
  id TEXT PRIMARY KEY,
  client_id TEXT REFERENCES users(id),
  vendor_id TEXT REFERENCES vendors(id),
  event_id TEXT REFERENCES events(id),
  message TEXT NOT NULL,
  budget_range TEXT,
  status TEXT DEFAULT 'sent',
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);
```

## Vendor Categories Configuration

### Add to `app/config/categories.ts`

```typescript
export const VENDOR_CATEGORIES = {
  'hotels-venues': {
    icon: 'Building',
    color: 'bg-blue-100 text-blue-700',
  },
  'equipment-supplies': {
    icon: 'Package',
    color: 'bg-green-100 text-green-700',
  },
  catering: {
    icon: 'Utensils',
    color: 'bg-orange-100 text-orange-700',
  },
  restaurants: {
    icon: 'ChefHat',
    color: 'bg-red-100 text-red-700',
  },
  'training-coaching': {
    icon: 'GraduationCap',
    color: 'bg-purple-100 text-purple-700',
  },
  'audio-video': {
    icon: 'Video',
    color: 'bg-indigo-100 text-indigo-700',
  },
  'dj-services': {
    icon: 'Music',
    color: 'bg-pink-100 text-pink-700',
  },
  'marketing-design': {
    icon: 'Palette',
    color: 'bg-yellow-100 text-yellow-700',
  },
  'photography-video': {
    icon: 'Camera',
    color: 'bg-cyan-100 text-cyan-700',
  },
  transportation: {
    icon: 'Car',
    color: 'bg-gray-100 text-gray-700',
  },
  'travel-tours': {
    icon: 'MapPin',
    color: 'bg-emerald-100 text-emerald-700',
  },
  'leisure-experiences': {
    icon: 'Zap',
    color: 'bg-rose-100 text-rose-700',
  },
} as const;
```

## Feature Implementation Priorities

### Phase 1 - MVP (Extend Current Landing Page)

#### 1. Authentication System

**New Routes to Add:**

- `app/routes/auth/login.tsx`
- `app/routes/auth/register.tsx`
- `app/routes/auth/register/vendor.tsx`

**Components to Create:**

```typescript
// app/components/auth/LoginForm.tsx
// app/components/auth/RegisterClientForm.tsx
// app/components/auth/RegisterVendorForm.tsx (2-step process)
// app/components/auth/ProtectedRoute.tsx
```

#### 2. Homepage Enhancement (Modify Existing)

**Update `app/routes/_index.tsx`:**

- Add category dropdown to existing header
- Replace hero CTA with "Esplora i fornitori"
- Add CategoryGrid component below hero
- Add VendorCatalog section with filters

**New Components:**

```typescript
// app/components/sections/CategoryGrid.tsx
// app/components/sections/VendorCatalog.tsx
// app/components/vendor/VendorCard.tsx
// app/components/vendor/SearchFilters.tsx
```

#### 3. Vendor Management

**New Routes:**

- `app/routes/vendors/_index.tsx` (catalog)
- `app/routes/vendors/$vendorId.tsx` (profile)
- `app/routes/dashboard/vendor.tsx`

#### 4. Event Creation

**New Routes:**

- `app/routes/events/create.tsx`
- `app/routes/dashboard/client.tsx`

### Phase 2 - Enhanced Features

#### 1. Review System

**Database Tables:**

```sql
CREATE TABLE reviews (
  id TEXT PRIMARY KEY,
  client_id TEXT REFERENCES users(id),
  vendor_id TEXT REFERENCES vendors(id),
  rating INTEGER CHECK(rating >= 1 AND rating <= 5),
  comment TEXT,
  vendor_response TEXT,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);
```

#### 2. Quote Management Dashboard

**New Routes:**

- `app/routes/dashboard/quotes.tsx`
- `app/routes/quotes/$quoteId.tsx`

#### 3. File Upload (R2 Integration)

**Create `app/lib/storage.ts`:**

```typescript
export async function uploadFile(file: File, key: string, env: Env): Promise<string> {
  const formData = new FormData();
  formData.append('file', file);

  await env.EVEO_BUCKET.put(key, file.stream());
  return `https://eveo-files.domain.com/${key}`;
}
```

### Phase 3 - Advanced Features

#### 1. AI Quote Assistant

**New Dependencies:**

```bash
bun install @ai-sdk/anthropic ai
```

#### 2. Payment Integration

**New Dependencies:**

```bash
bun install stripe @stripe/stripe-js
```

## Internationalization Extensions

### Add Marketplace Translations

**Extend existing `app/i18n/translations/` files:**

```json
// app/i18n/translations/it.json (add to existing)
{
  "vendor": {
    "categories": {
      "hotel-strutture": "Hotel e Strutture Ricettive",
      "catering": "Catering",
      "dj": "DJ"
    },
    "subscription": {
      "monthly": "Mensile - â‚¬69.99/mese",
      "annual": "Annuale - â‚¬699.99/anno",
      "trial": "Prova gratuita 3 mesi"
    }
  },
  "auth": {
    "login": "Accedi",
    "register": "Registrati",
    "userType": {
      "client": "Cliente",
      "vendor": "Fornitore"
    }
  }
}
```

## API Layer Integration

### Extend Worker Configuration

**Update `worker-configuration.ts`:**

```typescript
export interface Env {
  // Existing environment variables
  EVEO_DB: D1Database;
  EVEO_KV: KVNamespace;
  EVEO_BUCKET: R2Bucket;
  JWT_SECRET: string;
  STRIPE_SECRET_KEY: string;
  EMAIL_API_KEY: string;
}
```

### API Services

**Create `app/services/api/` directory:**

```typescript
// app/services/api/auth.ts
export async function login(email: string, password: string) {
  // Implementation
}

// app/services/api/vendors.ts
export async function getVendors(filters?: VendorFilters) {
  // Implementation
}

// app/services/api/events.ts
export async function createEvent(eventData: EventData) {
  // Implementation
}
```

## Form Validation (Zod Schemas)

### Create `app/lib/validation.ts`

```typescript
import { z } from 'zod';

export const userRegistrationSchema = z.object({
  email: z.string().email(),
  password: z.string().min(8),
  name: z.string().min(2),
  userType: z.enum(['client', 'vendor']),
});

export const vendorRegistrationSchema = z.object({
  companyName: z.string().min(2),
  category: z.string(),
  description: z.string().optional(),
  coverageArea: z.string(),
  subscriptionType: z.enum(['monthly', 'annual']),
});

export const eventCreationSchema = z.object({
  title: z.string().min(3),
  description: z.string().optional(),
  eventDate: z.date(),
  location: z.string().min(3),
  guestCount: z.number().positive(),
  selectedCategories: z.array(z.string()),
});
```

## Security Implementation

### Authentication Middleware

**Create `app/lib/auth.ts`:**

```typescript
import jwt from 'jsonwebtoken';

export async function verifyToken(request: Request, env: Env) {
  const token = getCookie(request, 'auth-token');
  if (!token) return null;

  try {
    const payload = jwt.verify(token, env.JWT_SECRET);
    return payload as { userId: string; userType: string };
  } catch {
    return null;
  }
}

export async function requireAuth(request: Request, env: Env) {
  const user = await verifyToken(request, env);
  if (!user) {
    throw redirect('/auth/login');
  }
  return user;
}
```

## Email Integration

### Extend Existing Email Service

**Update `app/services/email.ts`:**

```typescript
// Add to existing email service
export async function sendQuoteRequest(
  vendorEmail: string,
  clientInfo: ClientInfo,
  eventDetails: EventDetails,
  env: Env
) {
  const template = getEmailTemplate('quote-request', clientInfo.language);
  // Implementation
}

export async function sendWelcomeEmail(userEmail: string, userType: 'client' | 'vendor', language: string, env: Env) {
  const template = getEmailTemplate(`welcome-${userType}`, language);
  // Implementation
}
```

## Development Commands (Extend Existing)

### Database Commands

```bash
# Database migrations
bun run db:generate     # Generate migration files
bun run db:migrate:prod # Apply to production
bun run db:migrate:dev  # Apply to local/preview
bun run db:seed         # Seed with sample data

# New development commands
bun run dev:db          # Start with local D1
bun run test:db         # Run database tests
```

### New bun Scripts to Add

```json
{
  "scripts": {
    "db:generate": "wrangler d1 migrations create",
    "db:migrate:prod": "wrangler d1 migrations apply eveo-production",
    "db:migrate:dev": "wrangler d1 migrations apply eveo-preview --local",
    "db:console": "wrangler d1 execute eveo-preview --local --command",
    "vendor:seed": "tsx scripts/seed-vendors.ts"
  }
}
```

## Testing Strategy (Extend Existing)

### Additional Test Files

```typescript
// app/__tests__/auth.test.tsx
// app/__tests__/vendor-registration.test.tsx
// app/__tests__/event-creation.test.tsx
// app/__tests__/api/vendors.test.ts
```

### Integration Tests

```bash
# Test database operations
bun run test:integration

# Test email functionality
bun run test:email

# Test payment flows
bun run test:payments
```

## Performance Optimizations

### Caching Strategy (Extend Existing)

```typescript
// Add to existing caching
const CACHE_KEYS = {
  VENDORS_BY_CATEGORY: 'vendors:category:',
  VENDOR_PROFILE: 'vendor:profile:',
  EVENT_TEMPLATES: 'events:templates',
};

// Cache vendor listings for 30 minutes
// Cache individual profiles for 1 hour
// Cache category metadata for 24 hours
```

### Image Optimization

**Extend existing `vite.config.ts`:**

```typescript
// Add R2 integration for vendor images
// Optimize uploaded files automatically
// Generate responsive image variants
```

## Deployment Strategy

### Environment Variables

**Add to `.prod.vars` and `.preview.vars`:**

```env
EVEO_DB_ID=your-d1-database-id
EVEO_KV_ID=your-kv-namespace-id
EVEO_BUCKET_NAME=your-r2-bucket-name
JWT_SECRET=your-jwt-secret
STRIPE_PUBLISHABLE_KEY=pk_live_...
STRIPE_SECRET_KEY=sk_live_...
EMAIL_API_KEY=your-email-api-key
```

### Deployment Commands (Extend Existing)

```bash
# Deploy with database
bun run deploy:full     # Deploy app + run migrations

# Deploy specific features
bun run deploy:vendor   # Deploy vendor features only
bun run deploy:payments # Deploy payment features only
```

## Business Logic Rules

### Vendor Registration Flow

1. Step 1: Basic info (name, email, category)
2. Step 2: Category-specific details + coverage area
3. Payment processing (â‚¬69.99/month or â‚¬699.99/year)
4. 3-month trial with payment method required
5. Email verification and manual approval

### Quote Request Logic

- **Venues**: Filter by exact geographic location
- **Services**: Filter by coverage area (regional or national)
- **Email Templates**: Personalized by vendor category and language
- **Required Fields**: Client email, phone, event details
- **Optional Fields**: Budget range (to be added in Phase 2)

### Multi-language Support

- Vendor profiles support multiple languages
- Email templates localized per recipient preference
- Category names translated in all supported languages
- SEO metadata per language/region combination

## Key Integration Points

### With Existing Codebase

1. **Extend existing header** with vendor category dropdown
2. **Enhance hero section** with marketplace-specific CTA
3. **Reuse existing UI components** (Button, Card, Dialog, etc.)
4. **Extend i18n system** with marketplace translations
5. **Build on existing Cloudflare Workers** setup
6. **Leverage existing form handling** patterns

### With External Services

1. **Payment Processing**: Stripe integration for subscriptions
2. **Email Service**: Extend existing email service for notifications
3. **File Storage**: R2 for vendor documents and proposals
4. **Analytics**: Extend existing tracking for marketplace events

---

## Notes for AI Assistant

- **Preserve existing architecture**: Build on the solid foundation already established
- **Maintain code quality**: Follow existing patterns for components, forms, and services
- **Respect i18n setup**: All new features must support multiple languages
- **Extend, don't replace**: Enhance existing components rather than rebuilding
- **Test thoroughly**: Write tests for all new marketplace functionality
- **Mobile-first**: Ensure all new UI components work well on mobile devices
- **SEO-conscious**: Maintain existing SEO patterns for new pages
- **Performance-aware**: Leverage existing caching and optimization strategies
